{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeUrl","e","preventDefault","setState","url","target","value","getTracklist","asyncToGenerator","regenerator_default","a","mark","_callee","tracklist","wrap","_context","prev","next","validator","isURL","state","abrupt","loading","axios","method","data","sent","err","Array","isArray","map","track","concat","artist","name","join","stop","react_default","createElement","Jumbotron","className","Form","inline","FormGroup","Input","type","id","placeholder","onChange","Button","onClick","Spinner","App_Tracklist","list","Component","Tracklist","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAKMA,cACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,UAAY,SAAAC,GACVA,EAAEC,iBAEFT,EAAKU,SAAS,CAAEC,IAAKH,EAAEI,OAAOC,SAbZb,EAgBpBc,aAhBoBb,OAAAc,EAAA,EAAAd,CAAAe,EAAAC,EAAAC,KAgBL,SAAAC,IAAA,IAAAC,EAAA,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACRC,IAAUC,MAAM1B,EAAK2B,MAAMhB,KADnB,CAAAW,EAAAE,KAAA,eAEXxB,EAAKU,SAAS,CAAEU,UAAW,qBAFhBE,EAAAM,OAAA,wBAMb5B,EAAKU,SAAS,CAAEmB,SAAS,EAAMT,UAAW,KAN7BE,EAAAE,KAAA,EAQSM,IAAM,CAC1BC,OAAQ,OACRpB,IAAK,8CACLqB,KAAM,CACJrB,IAAKX,EAAK2B,MAAMhB,OAZP,QAQTS,EARSE,EAAAW,MAgBCD,KAAKE,IACjBlC,EAAKU,SAAS,CAAEU,UAAWA,EAAUY,KAAKE,OAE1Cd,EAAYA,EAAUY,KAAKZ,UACvBe,MAAMC,QAAQhB,KAChBA,EAAYA,EACTiB,IAAI,SAAAC,GAAK,SAAAC,OAAOD,EAAME,OAAb,OAAAD,OAAyBD,EAAMG,QACxCC,KAAK,OAEV1C,EAAKU,SAAS,CAAEU,eAGlBpB,EAAKU,SAAS,CAAEmB,SAAS,IA5BZ,wBAAAP,EAAAqB,SAAAxB,MAbbnB,EAAK2B,MAAQ,CACXE,SAAS,EACTT,UAAW,GACXT,IAAK,IANWX,wEA+CV,IACA6B,EAAY1B,KAAKwB,MAAjBE,QAER,OACEe,EAAA3B,EAAA4B,cAAA,WACED,EAAA3B,EAAA4B,cAACC,EAAA,EAAD,KACEF,EAAA3B,EAAA4B,cAAA,MAAIE,UAAU,aAAd,eACAH,EAAA3B,EAAA4B,cAAA,KAAGE,UAAU,QAAb,4CACAH,EAAA3B,EAAA4B,cAAA,MAAIE,UAAU,SAEdH,EAAA3B,EAAA4B,cAACG,EAAA,EAAD,CAAMC,QAAM,GACVL,EAAA3B,EAAA4B,cAACK,EAAA,EAAD,CAAWH,UAAU,wBACnBH,EAAA3B,EAAA4B,cAACM,EAAA,EAAD,CACEC,KAAK,MACLX,KAAK,MACLY,GAAG,MACHC,YAAY,qBACZC,SAAUpD,KAAKI,aAGnBqC,EAAA3B,EAAA4B,cAACW,EAAA,EAAD,CAAQC,QAAStD,KAAKW,cAAtB,WAEF8B,EAAA3B,EAAA4B,cAAA,WACGhB,EAAUe,EAAA3B,EAAA4B,cAACa,EAAA,EAAD,MAAcd,EAAA3B,EAAA4B,cAACc,EAAD,CAAWC,KAAMzD,KAAKwB,MAAMP,sBAvE/CyC,aA+EZC,mLAEF,OAAOlB,EAAA3B,EAAA4B,cAAA,WAAM1C,KAAKJ,MAAM6D,aAFJC,aAMT/D,IC9EKiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAA3B,EAAA4B,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e09a9a05.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Button, Form, FormGroup, Input, Jumbotron, Spinner } from 'reactstrap'\nimport axios from 'axios'\nimport validator from 'validator'\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      loading: false,\n      tracklist: '',\n      url: ''\n    }\n  }\n\n  changeUrl = e => {\n    e.preventDefault()\n\n    this.setState({ url: e.target.value })\n  }\n\n  getTracklist = async () => {\n    if (!validator.isURL(this.state.url)) {\n      this.setState({ tracklist: 'Url is not valid' })\n      return\n    }\n\n    this.setState({ loading: true, tracklist: '' })\n\n    let tracklist = await axios({\n      method: 'post',\n      url: 'https://tracklister.herokuapp.com/tracklist',\n      data: {\n        url: this.state.url\n      }\n    })\n\n    if (tracklist.data.err) {\n      this.setState({ tracklist: tracklist.data.err })\n    } else {\n      tracklist = tracklist.data.tracklist\n      if (Array.isArray(tracklist)) {\n        tracklist = tracklist\n          .map(track => `${track.artist} - ${track.name}`)\n          .join(', ')\n      }\n      this.setState({ tracklist })\n    }\n\n    this.setState({ loading: false })\n  }\n\n  render () {\n    const { loading } = this.state\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1 className='display-3'>Tracklister</h1>\n          <p className='lead'>Find tracks from your favorite music set</p>\n          <hr className='my-2' />\n\n          <Form inline>\n            <FormGroup className='mb-2 mr-sm-2 mb-sm-0'>\n              <Input\n                type='url'\n                name='url'\n                id='url'\n                placeholder='Insert YouTube url'\n                onChange={this.changeUrl}\n              />\n            </FormGroup>\n            <Button onClick={this.getTracklist}>Submit</Button>\n          </Form>\n          <div>\n            {loading ? <Spinner /> : <Tracklist list={this.state.tracklist} />}\n          </div>\n        </Jumbotron>\n      </div>\n    )\n  }\n}\n\nclass Tracklist extends Component {\n  render () {\n    return <div>{this.props.list}</div>\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}